version: "3.9"

services:
  postgres:
    image: pgvector/pgvector:pg16
    container_name: flowopsai_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB} || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 10
    ports:
      - "5432:5432"
    restart: unless-stopped

  backend-server:
    build:
      context: ./backend
      dockerfile: Dockerfile.server
    container_name: flowopsai_backend
    env_file: .env
    environment:
      DATABASE_URL: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      FLOWOPSAI_SERVER_PORT: ${FLOWOPSAI_SERVER_PORT}
      TRAINER_URL: http://trainer:${TRAINER_PORT}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      LOG_LEVEL: ${LOG_LEVEL}
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:${FLOWOPSAI_SERVER_PORT}/api/health || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 20
    ports:
      - "${FLOWOPSAI_SERVER_PORT}:${FLOWOPSAI_SERVER_PORT}"
    volumes:
      - models_storage:/models
    restart: unless-stopped
    command: uvicorn src.server.main:app --host 0.0.0.0 --port ${FLOWOPSAI_SERVER_PORT}

  agents:
    build:
      context: ./backend
      dockerfile: Dockerfile.agents
    container_name: flowopsai_agents
    env_file: .env
    environment:
      DATABASE_URL: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      BACKEND_URL: http://backend-server:${FLOWOPSAI_SERVER_PORT}
      LOG_LEVEL: ${LOG_LEVEL}
    depends_on:
      postgres:
        condition: service_healthy
      backend-server:
        condition: service_started
    command: python -m src.agents.main
    volumes:
      - models_storage:/models
    restart: unless-stopped

  trainer:
    build:
      context: ./ml-trainer
      dockerfile: Dockerfile.trainer
    container_name: flowopsai_trainer
    env_file: .env
    environment:
      TRAINER_PORT: ${TRAINER_PORT}
      LOG_LEVEL: ${LOG_LEVEL}
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:${TRAINER_PORT}/ || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 20
    ports:
      - "${TRAINER_PORT}:${TRAINER_PORT}"
    volumes:
      - models_storage:/models
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.frontend
    container_name: flowopsai_frontend
    env_file: .env
    environment:
      FLOWOPSAI_UI_PORT: ${FLOWOPSAI_UI_PORT}
    depends_on:
      backend-server:
        condition: service_started
    # Map host 3737 -> container 80 (nginx listens on 80)
    ports:
      - "${FLOWOPSAI_UI_PORT}:80"
    restart: unless-stopped

volumes:
  postgres_data:
  models_storage:
